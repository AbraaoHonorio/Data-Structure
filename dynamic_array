class DynamicArray:
    
    def __init__(self, capacity: int | None = None):
        self._capacity = capacity or 1
        self._array = [None] * self._capacity
        self._length = 0

    def get(self, i: int) -> int | None:
        if 0 <= i < self._length:
            return self._array[i]

        raise IndexError("Index out of bounds")

    def set(self, i: int, n: int)  -> None:
        if 0 > i > self._length:
            raise IndexError("Index out of bounds")

        self._array[i] = n

    def pushback(self, n: int) -> None:
        if self._length == self._capacity:
            self._resize()
         
        self._array[self._length] = n
        self._length += 1 

    def popback(self) -> int:
        if self._length == 0:
            raise IndexError("Cannot pop from an empty array")

        self._length -= 1
        value = self._array[self._length]
        del self._array[self._length]  
        return value

    def _resize(self) -> None:
        self._capacity = max(2 * self._capacity, 1)
        new_array = [None] * self._capacity
        for i in range(self._length):
            new_array[i] = self._array[i]
        
        self._array = new_array

    def getSize(self) -> int:
        return self._length
    
    def getCapacity(self) -> int:
        return self._capacity
